#INFO: **** input file is /Users/jmhrzz/HPQC/TEMP/RandomThoughts/FC/UHF/N/aVDZ/CoreFreeze.py ****
import pyscf
import numpy as np
import warnings
from functools import reduce
from pyscf import gto
from pyscf.gto.basis import parse_gaussian
from pyscf.mp.mp2 import get_frozen_mask
from pyscf import lib, ao2mo
from pyscf.scf import atom_hf
from pyscf import __config__

#np.set_printoptions(threshold=np.inf, formatter={'float_kind':lambda x: f"{x: .20E}"})
np.set_printoptions(threshold=np.inf)

def _normalize_spin_masks(mask, nmo):
    if isinstance(mask, (tuple, list)) and len(mask) == 2:
        ma = np.asarray(mask[0], dtype=bool)
        mb = np.asarray(mask[1], dtype=bool)
    else:
        m = np.asarray(mask, dtype=bool)
        if m.size == 2 * nmo:
            ma = m[:nmo].copy()
            mb = m[nmo:].copy()
        elif m.size == nmo:
            ma = mb = m.copy()
        else:
            raise ValueError(f"Mask length {m.size} not compatible with nmo={nmo}.")
    return ma, mb

def freezeCore(oneBody_a, oneBody_b, twoBody_a, twoBody_b, twoBody_ab, frozen_core, active=None):
    nmo_a = np.asarray(oneBody_a).shape[0]
    nmo_b = np.asarray(oneBody_b).shape[0]
    if nmo_a != nmo_b:
        raise ValueError(f"Different nmo in oneBody_a ({nmo_a}) and oneBody_b ({nmo_b}).")
    nmo = nmo_a
    core_a, core_b = _normalize_spin_masks(frozen_core, nmo)
    if active is None:
        valence_a = ~core_a
        valence_b = ~core_b
    else:
        valence_a, valence_b = _normalize_spin_masks(active, nmo)
    assert core_a.shape == (nmo,) and core_b.shape == (nmo,)
    assert valence_a.shape == (nmo,) and valence_b.shape == (nmo,)
    core_idx_a = np.where(core_a)[0]
    core_idx_b = np.where(core_b)[0]
    val_idx_a  = np.where(valence_a)[0]
    val_idx_b  = np.where(valence_b)[0]
    constant   = np.einsum('ii->', oneBody_a[np.ix_(core_idx_a, core_idx_a)])
    constant  += np.einsum('ii->', oneBody_b[np.ix_(core_idx_b, core_idx_b)])
    core_aa    = twoBody_a[np.ix_(core_idx_a, core_idx_a, core_idx_a, core_idx_a)]
    core_bb    = twoBody_b[np.ix_(core_idx_b, core_idx_b, core_idx_b, core_idx_b)]
    core_ab    = twoBody_ab[np.ix_(core_idx_a, core_idx_a, core_idx_b, core_idx_b)]
    constant  += 0.5 * ( np.einsum('iijj->', core_aa) - np.einsum('ijji->', core_aa)
              + np.einsum('iijj->', core_bb) - np.einsum('ijji->', core_bb)
              + 2.0 * np.einsum('iijj->', core_ab) )
    
    h_active_a = oneBody_a[np.ix_(val_idx_a, val_idx_a)].copy()
    coul_aa = twoBody_a[np.ix_(val_idx_a, val_idx_a, core_idx_a, core_idx_a)]
    coul_ab = twoBody_ab[np.ix_(val_idx_a, val_idx_a, core_idx_b, core_idx_b)]
    h_active_a += np.einsum('pqkk->pq', coul_aa)
    h_active_a += np.einsum('pqkk->pq', coul_ab)
    exch_aa = twoBody_a[np.ix_(val_idx_a, core_idx_a, core_idx_a, val_idx_a)]
    h_active_a -= np.einsum('pkkq->pq', exch_aa)
    
    h_active_b = oneBody_b[np.ix_(val_idx_b, val_idx_b)].copy()
    coul_bb = twoBody_b[np.ix_(val_idx_b, val_idx_b, core_idx_b, core_idx_b)]
    h_active_b += np.einsum('pqkk->pq', coul_bb)
    twoBody_ab_T = twoBody_ab.transpose(2,3,0,1)
    coul_ba = twoBody_ab_T[np.ix_(val_idx_b, val_idx_b, core_idx_a, core_idx_a)]
    h_active_b += np.einsum('pqkk->pq', coul_ba)
    exch_bb = twoBody_b[np.ix_(val_idx_b, core_idx_b, core_idx_b, val_idx_b)]
    h_active_b -= np.einsum('pkkq->pq', exch_bb)
    
    twoBody_active_a  = twoBody_a[np.ix_(val_idx_a, val_idx_a, val_idx_a, val_idx_a)].copy()
    twoBody_active_b  = twoBody_b[np.ix_(val_idx_b, val_idx_b, val_idx_b, val_idx_b)].copy()
    twoBody_active_ab = twoBody_ab[np.ix_(val_idx_a, val_idx_a, val_idx_b, val_idx_b)].copy()
    print(twoBody_active_a)
    
    return h_active_a, h_active_b, twoBody_active_a, twoBody_active_b, twoBody_active_ab, constant

def main():
    from pyscf import gto, scf, ao2mo
    name = 'out'
    mol = pyscf.M(
        atom='N',
        unit='angstrom',
        basis={'N': parse_gaussian.load('N-aVDZ-EMSL.gbs', 'N')},
        charge=0,
        spin=3,
        verbose=9,
        symmetry=True,
        output=name + '.txt',
        symmetry_subgroup='D2h',
        max_memory=4000,
    )

    original_AtomSphAverageRHF = atom_hf.AtomSphAverageRHF

    class CustomAtomSphAverageRHF(original_AtomSphAverageRHF):
        def __init__(self, mol):
            super().__init__(mol)
            self.max_cycle = 9999
            self.direct_scf = False

    atom_hf.AtomSphAverageRHF = CustomAtomSphAverageRHF
    mymf = mol.UHF().set(
        conv_tol=1e-14,
        max_cycle=9999,
        ddm_tol=1e-15,
        direct_scf=False,
        chkfile=name + '.chk',
        init_guess='atom',
        irrep_nelec={'Ag': 4, 'B3u': 1, 'B2u': 1, 'B1u': 1}
    )
    
    mymf.kernel()
    atom_hf.AtomSphAverageRHF = original_AtomSphAverageRHF
    
    def compute_mo_irreps(mol, mo_coeff):
        symm_orbs = mol.symm_orb
        irrep_labels = mol.irrep_name
        mo_irreps = []
        for mo in mo_coeff.T:
            projections = [np.linalg.norm(symm_orbs[i].T @ mo) for i in range(len(symm_orbs))]
            irrep_idx = np.argmax(projections)
            mo_irreps.append(irrep_labels[irrep_idx])
        return mo_irreps

    
    def align_beta_orbitals_to_alpha(mol, mo_coeff):
        alpha_orbs, beta_orbs = mo_coeff[0], mo_coeff[1]
        alpha_irreps = compute_mo_irreps(mol, mo_coeff[0])
        beta_irreps = compute_mo_irreps(mol, mo_coeff[1])
        beta_orbs_sorted = []
        used_indices = set()
        for target_irrep in alpha_irreps:
            for idx, beta_irrep in enumerate(beta_irreps):
                if beta_irrep == target_irrep and idx not in used_indices:
                    beta_orbs_sorted.append(beta_orbs[:, idx])
                    used_indices.add(idx)
                    break
            else:
                raise ValueError(f"No matching beta orbital found for alpha irrep: {target_irrep}")
        beta_orbs_sorted = np.column_stack(beta_orbs_sorted)
        return alpha_orbs, beta_orbs_sorted
    
    
    from scipy.optimize import linear_sum_assignment
    def align_beta_to_alpha_by_overlap(mo_a, mo_b):
        S = np.abs(mo_a.T @ mo_b)
        cost = 1.0 - S
        row_ind, col_ind = linear_sum_assignment(cost)
        mo_b_sorted = mo_b[:, col_ind]
        for i in range(mo_a.shape[1]):
            ov = np.dot(mo_a[:, i], mo_b_sorted[:, i])
            if ov < 0:
                mo_b_sorted[:, i] *= -1.0
        return mo_a.copy(), mo_b_sorted.copy()


    
    mo_coeff = mymf.mo_coeff
    mol = mymf.mol
    
    alpha_irreps = compute_mo_irreps(mol, mo_coeff[0])
    beta_irreps = compute_mo_irreps(mol, mo_coeff[1])
    print(alpha_irreps)
    print(beta_irreps)
    
    assert mo_coeff[0].dtype == np.double and mo_coeff[1].dtype == np.double
    
    mo_coeff_a, mo_coeff_b = align_beta_orbitals_to_alpha(mol, mo_coeff)
    #mo_coeff_a, mo_coeff_b = align_beta_to_alpha_by_overlap(mo_coeff[0], mo_coeff[1])
    
    mymf.mo_coeff = (mo_coeff_a, mo_coeff_b)
    
    alpha_irreps = compute_mo_irreps(mol, mo_coeff_a)
    beta_irreps = compute_mo_irreps(mol, mo_coeff_b)
    print(alpha_irreps)
    print(beta_irreps)
    
    from pyscf import cc
    mycc = cc.UCCSD(mymf, frozen=1)
        
    orbsym_full = getattr(mo_coeff_a, 'orbsym', None)
    nuc = mymf.energy_nuc()
    
    nmo = mo_coeff_a.shape[0]
    
    h1e_a  = reduce(np.dot, (mo_coeff_a.T, mymf.get_hcore(), mo_coeff_a))
    h1e_b  = reduce(np.dot, (mo_coeff_b.T, mymf.get_hcore(), mo_coeff_b))
    
    eri_a  = ao2mo.restore(1,ao2mo.incore.general(mymf._eri,(mo_coeff_a, mo_coeff_a, mo_coeff_a, mo_coeff_a),compact=False),nmo)
    eri_b  = ao2mo.restore(1,ao2mo.incore.general(mymf._eri,(mo_coeff_b, mo_coeff_b, mo_coeff_b, mo_coeff_b),compact=False),nmo)
    eri_ab = ao2mo.restore(1,ao2mo.incore.general(mymf._eri,(mo_coeff_a, mo_coeff_a, mo_coeff_b, mo_coeff_b),compact=False),nmo)
    print(eri_a)

    active = get_frozen_mask(mycc)
    active_in = active

    mo_occ_obj = getattr(getattr(mycc, '_scf', None) or getattr(mycc, 'mf', None) or mycc, 'mo_occ', None)
    if isinstance(mo_occ_obj, np.ndarray) and mo_occ_obj.ndim == 2 and mo_occ_obj.shape[0] == 2:
        mo_occ_a = mo_occ_obj[0]
        mo_occ_b = mo_occ_obj[1]
    elif isinstance(mo_occ_obj, (list, tuple)) and len(mo_occ_obj) == 2:
        mo_occ_a = np.asarray(mo_occ_obj[0])
        mo_occ_b = np.asarray(mo_occ_obj[1])
    else:
        mo_occ_a = mo_occ_b = np.asarray(mo_occ_obj)

    nmo = mo_occ_a.size

    if isinstance(active_in, (tuple, list)) and len(active_in) == 2:
        act_a = np.asarray(active_in[0], dtype=bool)
        act_b = np.asarray(active_in[1], dtype=bool)
    else:
        act = np.asarray(active_in, dtype=bool)
        if act.size == 2 * nmo:
            act_a = act[:nmo].copy()
            act_b = act[nmo:].copy()
        elif act.size == nmo:
            act_a = act_b = act.copy()
        else:
            raise ValueError(f"Unexpected active length {act.size}; expected {nmo} or {2*nmo}")
        
    shared = np.asarray(act_a, dtype=bool) & np.asarray(act_b, dtype=bool)
    
    act_a[:] = shared
    act_b[:] = shared
    
    active_full = np.empty(2 * nmo, dtype=bool)
    active_full[:nmo] = act_a
    active_full[nmo:] = act_b
    active = active_full
    frozen_core = np.zeros_like(active, dtype=np.bool_)
    nocc_full = mol.nelectron // 2
    frozen_core[:nocc_full] = ~active[:nocc_full]

    nocc_a = int(np.count_nonzero(np.asarray(mo_occ_a) > 0.5))
    nocc_b = int(np.count_nonzero(np.asarray(mo_occ_b) > 0.5))

    frozen_core_a = np.zeros_like(act_a, dtype=bool)
    frozen_core_b = np.zeros_like(act_b, dtype=bool)

    frozen_core_a[:nocc_a] = ~act_a[:nocc_a]
    frozen_core_b[:nocc_b] = ~act_b[:nocc_b]

    h1e_a, h1e_b, eri_a, eri_b, eri_ab, constant = freezeCore(h1e_a, h1e_b, eri_a, eri_b, eri_ab, frozen_core=(frozen_core_a, frozen_core_b), active=(act_a, act_b))
    
    nmo_active = h1e_a.shape[0]

    if orbsym_full is None:
        orbsym_active = None
    else:
        orbsym_arr = np.asarray(orbsym_full, dtype=int)
        valence_idx = np.where(act_a)[0]
        orbsym_active = [int(x) for x in orbsym_arr[valence_idx]]
        
    if orbsym_active is not None:
        if len(orbsym_active) != nmo_active:
            raise RuntimeError(f"Length mismatch: orbsym_active has length {len(orbsym_active)} "
                               f"but number of active orbitals is {nmo_active}.")

    filename = 'fort.55'
    nelec_full = mol.nelectron
    spin = mol.spin       
    nalpha_full = (nelec_full + spin) // 2
    nbeta_full  = (nelec_full - spin) // 2
    nocc_full = mol.nelectron // 2
    nfrozen_core = int(np.count_nonzero(frozen_core[:nocc_full]))
    nalpha_active = nalpha_full - nfrozen_core
    nbeta_active  = nbeta_full  - nfrozen_core
    nelec_active = (nalpha_active, nbeta_active)
    
    
    DEFAULT_FLOAT_FORMAT = getattr(__config__, 'fcidump_float_format', ' %.16g')
    TOL = getattr(__config__, 'fcidump_write_tol', 1e-15)
    
    def write_hcore_uhf(fout, h1e_a, h1e_b, nmo, tol=TOL, float_format=DEFAULT_FLOAT_FORMAT):
        h1e_a = h1e_a.reshape(nmo,nmo)
        h1e_b = h1e_b.reshape(nmo,nmo)
        indx = [i+1 for i in range(nmo)]
        output_format = float_format + ' %5d %5d     0     0\n'
        for i in range(nmo):
            for j in range(i, nmo):
                if abs(h1e_a[i,j]) > TOL:
                    fout.write(output_format % (h1e_a[i,j], indx[i], indx[j]))
        fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')
        for i in range(nmo):
            for j in range(i, nmo):
                if abs(h1e_b[i,j]) > TOL:
                    fout.write(output_format % (h1e_b[i,j], indx[i], indx[j]))
        fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')
    
    print("DEBUG: eri shapes / dtypes")
    print("eri_a.shape =", np.asarray(eri_a).shape, "dtype=", np.asarray(eri_a).dtype)
    print("eri_b.shape =", np.asarray(eri_b).shape, "dtype=", np.asarray(eri_b).dtype)
    print("eri_ab.shape=", np.asarray(eri_ab).shape, "dtype=", np.asarray(eri_ab).dtype)
    print("sample eri_a[0,0,0,0] =", np.asarray(eri_a).flatten()[0] if np.asarray(eri_a).size>0 else None)
    
    
    def write_eri_uhf(fout, eri_a, eri_b, eri_ab, nmo, tol=TOL, float_format=DEFAULT_FLOAT_FORMAT):
        eri_a = np.asarray(eri_a)
        eri_b = np.asarray(eri_b)
        eri_ab = np.asarray(eri_ab)
        npair = nmo * (nmo + 1) // 2
        output_format = float_format + ' %5d %5d %5d %5d\n'
        indx = [i + 1 for i in range(nmo)]
        
        def pair_index(i, j):
            return i * (i + 1) // 2 + j

        if eri_a.ndim == 2 and eri_b.ndim == 2 and eri_ab.ndim == 2:
            assert eri_a.shape == (npair, npair) and eri_b.shape == (npair, npair) and eri_ab.shape == (npair, npair)
            kl = 0
            for l in range(nmo):
                for k in range(0, l+1):
                    ij = 0
                    for i in range(0, nmo):
                        for j in range(0, i+1):
                            if i >= k:
                                if abs(eri_a[ij, kl]) > tol:
                                    fout.write(output_format % (eri_a[ij, kl], indx[i], indx[j], indx[k], indx[l]))
                            ij += 1
                    kl += 1
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')

            kl = 0
            for l in range(nmo):
                for k in range(0, l+1):
                    ij = 0
                    for i in range(0, nmo):
                        for j in range(0, i+1):
                            if i >= k:
                                if abs(eri_b[ij, kl]) > tol:
                                    fout.write(output_format % (eri_b[ij, kl], indx[i], indx[j], indx[k], indx[l]))
                            ij += 1
                    kl += 1
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')

            ij = 0
            for j in range(nmo):
                for i in range(0, j+1):
                    kl = 0
                    for k in range(nmo):
                        for l in range(0, k+1):
                            if abs(eri_ab[ij, kl]) > tol:
                                fout.write(output_format % (eri_ab[ij, kl], indx[i], indx[j], indx[k], indx[l]))
                            kl += 1
                    ij += 1
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')
            return

        # CASE B: full 4D arrays
        if eri_a.ndim == 4 and eri_b.ndim == 4 and eri_ab.ndim == 4:
            for i in range(nmo):
                for j in range(0, i + 1):
                    ij_idx = pair_index(i, j)
                    for k in range(nmo):
                        for l in range(0, k + 1):
                            kl_idx = pair_index(k, l)
                            if ij_idx >= kl_idx:
                                val = eri_a[i, j, k, l]
                                if abs(val) > tol:
                                    fout.write(output_format % (val, indx[i], indx[j], indx[k], indx[l]))
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')

            for i in range(nmo):
                for j in range(0, i + 1):
                    ij_idx = pair_index(i, j)
                    for k in range(nmo):
                        for l in range(0, k + 1):
                            kl_idx = pair_index(k, l)
                            if ij_idx >= kl_idx:
                                val = eri_b[i, j, k, l]
                                if abs(val) > tol:
                                    fout.write(output_format % (val, indx[i], indx[j], indx[k], indx[l]))
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')

            for i in range(nmo):
                for j in range(0, i + 1):
                    for k in range(nmo):
                        for l in range(0, k + 1):
                            val = eri_ab[i, j, k, l]
                            if abs(val) > tol:
                                fout.write(output_format % (val, indx[i], indx[j], indx[k], indx[l]))
            fout.write(' 0.00000000000000000000E+00' + '     0     0     0     0\n')
            return

        raise RuntimeError(f"Unsupported ERI shapes: eri_a {eri_a.shape}, eri_b {eri_b.shape}, eri_ab {eri_ab.shape}")
        
    def write_head(fout, nmo, nelec, ms=0, orbsym=None):
        is_uhf = isinstance(nelec, (list, tuple)) and len(nelec) == 2 and nelec[0] != nelec[1]
        if not isinstance(nelec, (int, np.number)):
            ms = abs(nelec[0] - nelec[1])
            nelec = nelec[0] + nelec[1]
        fout.write(' &FCI NORB=%4d,NELEC=%2d,MS2=%d,\n' % (nmo, nelec, ms))
        if orbsym is not None and len(orbsym) > 0:
            fout.write('  ORBSYM=%s\n' % ','.join([str(x) for x in orbsym]))
        else:
            fout.write('  ORBSYM=%s\n' % ('1,' * nmo))
        fout.write('  ISYM=1,\n')
        if is_uhf:
            fout.write('  IUHF=1,\n')
        fout.write(' &END\n')
    
    
    def write_head55(fout, nmo, nelec, ms=0, orbsym=None):
        if not isinstance(nelec, (int, np.number)):
            ms = abs(nelec[0] - nelec[1])
            nelec = nelec[0] + nelec[1]
        fout.write(f"{nmo:1d} {nelec:1d}\n")
        if orbsym is not None and len(orbsym) > 0:
            orbsym = [x + 1 for x in orbsym]
            fout.write(f"{' '.join([str(x) for x in orbsym])}\n")
        else:
            fout.write(f"{' 1' * nmo}\n")
        fout.write(' 150000\n')
    
    
    def from_integrals_uhf(filename, h1e_a, h1e_b, eri_a, eri_b, eri_ab, nmo, nelec, nuc=0, ms=0, orbsym=None,
                       tol=TOL, float_format=DEFAULT_FLOAT_FORMAT):
        with open(filename, 'w') as fout:
            if filename == 'fort.55':
                write_head55(fout, nmo, nelec, ms, orbsym)
            else:
                write_head(fout, nmo, nelec, ms, orbsym)
            write_eri_uhf(fout, eri_a, eri_b, eri_ab, nmo, tol=tol, float_format=float_format)
            write_hcore_uhf(fout, h1e_a, h1e_b, nmo, tol=tol, float_format=float_format)
            output_format = float_format + '     0     0     0     0\n'
            fout.write(output_format % nuc)
    
    from_integrals_uhf(filename, h1e_a, h1e_b, eri_a, eri_b, eri_ab, nmo_active, nelec_active, nuc + constant, 0, orbsym_active, tol=1e-18, float_format='% 0.20E')
    
if __name__ == '__main__':
    main()

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Mhrzzs-MacBook-Air.local', release='25.0.0', version='Darwin Kernel Version 25.0.0: Wed Sep 17 21:38:03 PDT 2025; root:xnu-12377.1.9~141/RELEASE_ARM64_T8112', machine='arm64')  Threads 1
Python 3.11.10 (main, Sep  7 2024, 01:03:31) [Clang 16.0.0 (clang-1600.0.26.3)]
numpy 1.26.4  scipy 1.15.2  h5py 3.10.0
Date: Wed Oct 22 16:50:05 2025
PySCF version 2.6.2
PySCF path  /opt/homebrew/lib/python3.11/site-packages/pyscf

[CONFIG] ARGPARSE = False
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/sv/p893skhd53z1sh_0fgwlc_0w0000gn/T
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = None
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 7
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry True subgroup D2h
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 N      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] N
[INPUT] 0    0    [9    /2   ]  9046              0.0007 -0.000153
                                1357              0.005389 -0.001208
                                309.3             0.027406 -0.005992
                                87.73             0.103207 -0.024544
                                28.56             0.278723 -0.067459
                                10.21             0.44854 -0.158078
                                3.838             0.278238 -0.121831
                                0.7466            0.01544 0.549003
                                0.2248            -0.002864 0.578815
[INPUT] 0    0    [1    /1   ]  0.2248               1
[INPUT] 0    0    [1    /1   ]  0.06124              1
[INPUT] 1    0    [4    /1   ]  13.55             0.039919
                                2.917             0.217169
                                0.7973            0.510319
                                0.2185            0.462214
[INPUT] 1    0    [1    /1   ]  0.2185               1
[INPUT] 1    0    [1    /1   ]  0.05611              1
[INPUT] 2    0    [1    /1   ]  0.817                1
[INPUT] 2    0    [1    /1   ]  0.23                 1

nuclear repulsion = 0
point group symmetry = SO3, use subgroup D2h
symmetry origin: [0. 0. 0.]
symmetry axis x: [1. 0. 0.]
symmetry axis y: [0. 1. 0.]
symmetry axis z: [0. 0. 1.]
num. orbitals of irrep Ag = 8
num. orbitals of irrep B1g = 2
num. orbitals of irrep B2g = 2
num. orbitals of irrep B3g = 2
num. orbitals of irrep B1u = 3
num. orbitals of irrep B2u = 3
num. orbitals of irrep B3u = 3
number of shells = 8
number of NR pGTOs = 39
number of NR cGTOs = 23
basis = {'N': [[0, [9046.0, 0.0007, -0.000153], [1357.0, 0.005389, -0.001208], [309.3, 0.027406, -0.005992], [87.73, 0.103207, -0.024544], [28.56, 0.278723, -0.067459], [10.21, 0.44854, -0.158078], [3.838, 0.278238, -0.121831], [0.7466, 0.01544, 0.549003], [0.2248, -0.002864, 0.578815]], [0, [0.2248, 1.0]], [0, [0.06124, 1.0]], [1, [13.55, 0.039919], [2.917, 0.217169], [0.7973, 0.510319], [0.2185, 0.462214]], [1, [0.2185, 1.0]], [1, [0.05611, 1.0]], [2, [0.817, 1.0]], [2, [0.23, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.046e+03 1.357e+03 3.093e+02 8.773e+01 2.856e+01 1.021e+01 3.838e+00
 7.466e-01 2.248e-01]
bas 1, expnt(s) = [0.2248]
bas 2, expnt(s) = [0.06124]
bas 3, expnt(s) = [13.55    2.917   0.7973  0.2185]
bas 4, expnt(s) = [0.2185]
bas 5, expnt(s) = [0.05611]
bas 6, expnt(s) = [0.817]
bas 7, expnt(s) = [0.23]
CPU time:         2.35
arg.atm = [[ 7 20  1 23  0  0]]
arg.bas = [[ 0  0  9  2  0 24 33  0]
 [ 0  0  1  1  0 51 52  0]
 [ 0  0  1  1  0 53 54  0]
 [ 0  1  4  1  0 55 59  0]
 [ 0  1  1  1  0 63 64  0]
 [ 0  1  1  1  0 65 66  0]
 [ 0  2  1  1  0 67 68  0]
 [ 0  2  1  1  0 69 70  0]]
arg.env = [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  9.04600000e+03  1.35700000e+03  3.09300000e+02  8.77300000e+01
  2.85600000e+01  1.02100000e+01  3.83800000e+00  7.46600000e-01
  2.24800000e-01  1.64042177e+00  3.04409439e+00  5.10676225e+00
  7.47455423e+00  8.69974465e+00  6.47270078e+00  1.92757026e+00
  3.13312939e-02 -2.36230130e-03 -3.58549285e-01 -6.82365109e-01
 -1.11653344e+00 -1.77754839e+00 -2.10558871e+00 -2.28115991e+00
 -8.44017650e-01  1.11405261e+00  4.77421529e-01  2.24800000e-01
  8.24825833e-01  6.12400000e-02  3.11022216e-01  1.35500000e+01
  2.91700000e+00  7.97300000e-01  2.18500000e-01  3.02752891e+00
  2.41519886e+00  1.12163995e+00  2.01438243e-01  2.18500000e-01
  4.35811508e-01  5.61100000e-02  7.96681493e-02  8.17000000e-01
  1.83196843e+00  2.30000000e-01  1.99321019e-01]
ecpbas  = []


******** <class 'pyscf.scf.uhf_symm.SymAdaptedUHF'> ********
method = SymAdaptedUHF
initial guess = atom
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-14
SCF conv_tol_grad = None
SCF max_cycles = 9999
direct_scf = False
chkfile to save SCF result = out.chk
max_memory 4000 MB (current use 0 MB)
number electrons alpha = 5  beta = 2
irrep_nelec {'Ag': 4, 'B3u': 1, 'B2u': 1, 'B1u': 1}
Freeze 7 electrons in irreps ['Ag', 'B3u', 'B2u', 'B1u']
    0 free electrons in irreps B1g B2g B3g
cond(S) = 88.2325503994427
<class 'pyscf.scf.uhf_symm.SymAdaptedUHF'> does not have attributes  ddm_tol
Set gradient conv threshold to 1e-07
Spherically averaged atomic HF for {'N'}


******** <class '__main__.main.<locals>.CustomAtomSphAverageRHF'> ********
method = CustomAtomSphAverageRHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 9999
direct_scf = False
chkfile to save SCF result = /var/folders/sv/p893skhd53z1sh_0fgwlc_0w0000gn/T/tmp7fbfvon1
max_memory 4000 MB (current use 0 MB)
atom = N
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
Nelec from initial guess = 6.998830474197235
E1 = -74.23914991285119  E_coul = 20.457354225379294
init E= -53.7817956874719
l = 0  e_0 = -15.5387546
l = 0  e_1 = -0.914097449
l = 0  e_2 = 0.153713476
l = 0  e_3 = 1.37196991
l = 1  e_0 = -0.166064547
l = 1  e_1 = 0.175566151
l = 1  e_2 = 1.13819897
l = 2  e_0 = 0.691314519
l = 2  e_1 = 2.49882579
    CPU time for initialize scf      0.01 sec, wall time      0.01 sec
l = 0  e_0 = -15.5387546
l = 0  e_1 = -0.914097449
l = 0  e_2 = 0.153713476
l = 0  e_3 = 1.37196991
l = 1  e_0 = -0.166064547
l = 1  e_1 = 0.175566151
l = 1  e_2 = 1.13819897
l = 2  e_0 = 0.691314519
l = 2  e_1 = 2.49882579
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -72.54049767912306  E_coul = 18.71039081753587
cycle= 1 E= -53.8301068615872  delta_E= -0.0483  |g|=    0  |ddm|= 0.873
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.260557
diis-c [-0.06788971  1.        ]
l = 0  e_0 = -15.9940735
l = 0  e_1 = -1.09872612
l = 0  e_2 = 0.129031889
l = 0  e_3 = 1.2418988
l = 1  e_0 = -0.317483606
l = 1  e_1 = 0.157761231
l = 1  e_2 = 1.00176589
l = 2  e_0 = 0.640229144
l = 2  e_1 = 2.33993257
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.41806704784827  E_coul = 19.578323560245714
cycle= 2 E= -53.8397434876026  delta_E= -0.00964  |g|=    0  |ddm|= 0.633
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.105875
diis-c [-5.89599037e-04  2.84303569e-01  7.15696431e-01]
l = 0  e_0 = -15.8285411
l = 0  e_1 = -1.03608023
l = 0  e_2 = 0.13748539
l = 0  e_3 = 1.28594555
l = 1  e_0 = -0.261182486
l = 1  e_1 = 0.165046201
l = 1  e_2 = 1.05212377
l = 2  e_0 = 0.6588248
l = 2  e_1 = 2.39808118
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.12168469609955  E_coul = 19.279098704798283
cycle= 3 E= -53.8425859913013  delta_E= -0.00284  |g|=    0  |ddm|= 0.18
    CPU time for cycle= 3      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.0112253
diis-c [-1.62028534e-06 -9.99080254e-02 -1.29889418e-01  1.22979744e+00]
l = 0  e_0 = -15.8366919
l = 0  e_1 = -1.04058211
l = 0  e_2 = 0.137004411
l = 0  e_3 = 1.28331066
l = 1  e_0 = -0.263501946
l = 1  e_1 = 0.164910311
l = 1  e_2 = 1.05025053
l = 2  e_0 = 0.658060396
l = 2  e_1 = 2.39564485
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.13711053379845  E_coul = 19.294505958430033
cycle= 4 E= -53.8426045753684  delta_E= -1.86e-05  |g|=    0  |ddm|= 0.0287
    CPU time for cycle= 4      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.000610928
diis-c [-1.42439838e-08  3.08092896e-03  6.34281718e-03 -7.54204222e-02
  1.06599668e+00]
l = 0  e_0 = -15.837082
l = 0  e_1 = -1.04086367
l = 0  e_2 = 0.136887696
l = 0  e_3 = 1.28301244
l = 1  e_0 = -0.263687448
l = 1  e_1 = 0.164828545
l = 1  e_2 = 1.0499663
l = 2  e_0 = 0.657894731
l = 2  e_1 = 2.39532464
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.13826526880834  E_coul = 19.295660628721773
cycle= 5 E= -53.8426046400866  delta_E= -6.47e-08  |g|=    0  |ddm|= 0.00134
    CPU time for cycle= 5      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=1.1181e-05
diis-c [-1.16701076e-11  2.66632124e-04  1.31418561e-04 -1.24296351e-03
 -6.73654197e-02  1.06821033e+00]
l = 0  e_0 = -15.8370799
l = 0  e_1 = -1.04086778
l = 0  e_2 = 0.136886364
l = 0  e_3 = 1.28301199
l = 1  e_0 = -0.263690114
l = 1  e_1 = 0.16482884
l = 1  e_2 = 1.04996609
l = 2  e_0 = 0.657892667
l = 2  e_1 = 2.39532316
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.13824117292536  E_coul = 19.29563653276569
cycle= 6 E= -53.8426046401597  delta_E= -7.31e-11  |g|=    0  |ddm|= 2.33e-05
    CPU time for cycle= 6      0.00 sec, wall time      0.00 sec
l = 0  e_0 = -15.8370803
l = 0  e_1 = -1.04086814
l = 0  e_2 = 0.136886351
l = 0  e_3 = 1.28301196
l = 1  e_0 = -0.263690395
l = 1  e_1 = 0.164828872
l = 1  e_2 = 1.04996602
l = 2  e_0 = 0.65789259
l = 2  e_1 = 2.395323
l = 0  occ = 2 + 0
l = 1  occ = 0 + 1
l = 2  occ = 0 + 0
l = 3  occ = 0 + 0
E1 = -73.13824080000543  E_coul = 19.2956361598457
Extra cycle  E= -53.8426046401597  delta_E= -6.39e-14  |g|=    0  |ddm|= 8.13e-07
    CPU time for scf_cycle      0.01 sec, wall time      0.01 sec
    CPU time for SCF      0.01 sec, wall time      0.01 sec
Atomic HF for atom  N  converged. SCF energy = -53.8426046401597

Atom N, E = -53.8426046402
Nelec from initial guess = (3.500000000000001, 3.500000000000001)
E1 = -73.13824080000543  Ecoul = 19.2956361598457
init E= -53.8426046401597
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
alpha HOMO (B1u) = -0.263690438979029  LUMO (Ag) = 0.136886330189053
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.04086819891634  LUMO = 0.136886330189053
   mo_energy = [-15.83708038  -1.0408682    0.13688633   0.65789256   0.65789256
   1.28301192   2.39532295   2.39532295]
alpha-B1g nocc = 0
   mo_energy = [0.65789256 2.39532295]
alpha-B2g nocc = 0
   mo_energy = [0.65789256 2.39532295]
alpha-B3g nocc = 0
   mo_energy = [0.65789256 2.39532295]
alpha-B1u nocc = 1  HOMO = -0.263690438979029  LUMO = 0.164828861134578
   mo_energy = [-0.26369044  0.16482886  1.04996597]
alpha-B2u nocc = 1  HOMO = -0.263690438979029  LUMO = 0.164828861134578
   mo_energy = [-0.26369044  0.16482886  1.04996597]
alpha-B3u nocc = 1  HOMO = -0.263690438979029  LUMO = 0.164828861134578
   mo_energy = [-0.26369044  0.16482886  1.04996597]
beta-Ag nocc = 2  HOMO = -1.04086819891634  LUMO = 0.136886330189053
   mo_energy = [-15.83708038  -1.0408682    0.13688633   0.65789256   0.65789256
   1.28301192   2.39532295   2.39532295]
beta-B1g nocc = 0
   mo_energy = [0.65789256 2.39532295]
beta-B2g nocc = 0
   mo_energy = [0.65789256 2.39532295]
beta-B3g nocc = 0
   mo_energy = [0.65789256 2.39532295]
beta-B1u nocc = 0
   mo_energy = [-0.26369044  0.16482886  1.04996597]
beta-B2u nocc = 0
   mo_energy = [-0.26369044  0.16482886  1.04996597]
beta-B3u nocc = 0
   mo_energy = [-0.26369044  0.16482886  1.04996597]
multiplicity <S^2> = 3.75  2S+1 = 4
E1 = -73.1382408846646  Ecoul = 18.78100616305279
cycle= 1 E= -54.3572347216118  delta_E= -0.515  |g|= 0.178  |ddm|= 1.01
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.251652
diis-c [-0.0633289  1.       ]
alpha HOMO (B3u) = -0.616214963502119  LUMO (Ag) = 0.12114568674785
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.23260480273608  LUMO = 0.12114568674785
   mo_energy = [-15.87233523  -1.2326048    0.12114569   0.61783027   0.61783027
   1.23471951   2.31775892   2.31775892]
alpha-B1g nocc = 0
   mo_energy = [0.61783027 2.31775892]
alpha-B2g nocc = 0
   mo_energy = [0.61783027 2.31775892]
alpha-B3g nocc = 0
   mo_energy = [0.61783027 2.31775892]
alpha-B1u nocc = 1  HOMO = -0.616214963502119  LUMO = 0.148105525486761
   mo_energy = [-0.61621496  0.14810553  0.98154982]
alpha-B2u nocc = 1  HOMO = -0.616214963502119  LUMO = 0.148105525486761
   mo_energy = [-0.61621496  0.14810553  0.98154982]
alpha-B3u nocc = 1  HOMO = -0.616214963502119  LUMO = 0.148105525486761
   mo_energy = [-0.61621496  0.14810553  0.98154982]
beta-Ag nocc = 2  HOMO = -0.849463143651221  LUMO = 0.15217386264261
   mo_energy = [-15.80209     -0.84946314   0.15217386   0.69656201   0.69656201
   1.33235352   2.47427982   2.47427982]
beta-B1g nocc = 0
   mo_energy = [0.69656201 2.47427982]
beta-B2g nocc = 0
   mo_energy = [0.69656201 2.47427982]
beta-B3g nocc = 0
   mo_energy = [0.69656201 2.47427982]
beta-B1u nocc = 0
   mo_energy = [0.04567657 0.21343102 1.12966084]
beta-B2u nocc = 0
   mo_energy = [0.04567657 0.21343102 1.12966084]
beta-B3u nocc = 0
   mo_energy = [0.04567657 0.21343102 1.12966084]
multiplicity <S^2> = 3.7506742  2S+1 = 4.0003371
E1 = -73.92088805615049  Ecoul = 19.531688394219092
cycle= 2 E= -54.3891996619314  delta_E= -0.032  |g|= 0.0636  |ddm|= 0.41
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.0899207
diis-c [-0.00805124  0.02437251  0.97562749]
alpha HOMO (B3u) = -0.564960935594367  LUMO (Ag) = 0.136413560916606
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16313529603075  LUMO = 0.136413560916606
   mo_energy = [-15.67750636  -1.1631353    0.13641356   0.6478762    0.6478762
   1.28940433   2.38210762   2.38210762]
alpha-B1g nocc = 0
   mo_energy = [0.6478762  2.38210762]
alpha-B2g nocc = 0
   mo_energy = [0.6478762  2.38210762]
alpha-B3g nocc = 0
   mo_energy = [0.6478762  2.38210762]
alpha-B1u nocc = 1  HOMO = -0.564960935594368  LUMO = 0.155364247058105
   mo_energy = [-0.56496094  0.15536425  1.03159215]
alpha-B2u nocc = 1  HOMO = -0.564960935594368  LUMO = 0.155364247058105
   mo_energy = [-0.56496094  0.15536425  1.03159215]
alpha-B3u nocc = 1  HOMO = -0.564960935594367  LUMO = 0.155364247058104
   mo_energy = [-0.56496094  0.15536425  1.03159215]
beta-Ag nocc = 2  HOMO = -0.749676476586515  LUMO = 0.161575131968334
   mo_energy = [-15.59289728  -0.74967648   0.16157513   0.71484104   0.71484104
   1.39896293   2.55538205   2.55538205]
beta-B1g nocc = 0
   mo_energy = [0.71484104 2.55538205]
beta-B2g nocc = 0
   mo_energy = [0.71484104 2.55538205]
beta-B3g nocc = 0
   mo_energy = [0.71484104 2.55538205]
beta-B1u nocc = 0
   mo_energy = [0.08222148 0.26031248 1.21503278]
beta-B2u nocc = 0
   mo_energy = [0.08222148 0.26031248 1.21503278]
beta-B3u nocc = 0
   mo_energy = [0.08222148 0.26031248 1.21503278]
multiplicity <S^2> = 3.7532117  2S+1 = 4.0016055
E1 = -73.87648977922092  Ecoul = 19.484011197651995
cycle= 3 E= -54.3924785815689  delta_E= -0.00328  |g|= 0.0228  |ddm|= 0.225
    CPU time for cycle= 3      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.032209
diis-c [-1.87937894e-04 -8.49732253e-02 -3.35387233e-01  1.42036046e+00]
alpha HOMO (B1u) = -0.569273746975831  LUMO (Ag) = 0.139606177090001
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16249598211307  LUMO = 0.139606177090001
   mo_energy = [-15.67769386  -1.16249598   0.13960618   0.65280972   0.65280972
   1.29300134   2.38371401   2.38371401]
alpha-B1g nocc = 0
   mo_energy = [0.65280972 2.38371401]
alpha-B2g nocc = 0
   mo_energy = [0.65280972 2.38371401]
alpha-B3g nocc = 0
   mo_energy = [0.65280972 2.38371401]
alpha-B1u nocc = 1  HOMO = -0.569273746975831  LUMO = 0.156165243475127
   mo_energy = [-0.56927375  0.15616524  1.03208867]
alpha-B2u nocc = 1  HOMO = -0.569273746975833  LUMO = 0.156165243475127
   mo_energy = [-0.56927375  0.15616524  1.03208867]
alpha-B3u nocc = 1  HOMO = -0.569273746975832  LUMO = 0.156165243475127
   mo_energy = [-0.56927375  0.15616524  1.03208867]
beta-Ag nocc = 2  HOMO = -0.731490150945557  LUMO = 0.164650581915276
   mo_energy = [-15.58724513  -0.73149015   0.16465058   0.71623693   0.71623693
   1.41126609   2.56232423   2.56232423]
beta-B1g nocc = 0
   mo_energy = [0.71623693 2.56232423]
beta-B2g nocc = 0
   mo_energy = [0.71623693 2.56232423]
beta-B3g nocc = 0
   mo_energy = [0.71623693 2.56232423]
beta-B1u nocc = 0
   mo_energy = [0.08316821 0.26525853 1.22201252]
beta-B2u nocc = 0
   mo_energy = [0.08316821 0.26525853 1.22201252]
beta-B3u nocc = 0
   mo_energy = [0.08316821 0.26525853 1.22201252]
multiplicity <S^2> = 3.7563035  2S+1 = 4.0031505
E1 = -73.90658725157189  Ecoul = 19.5134168289509
cycle= 4 E= -54.393170422621  delta_E= -0.000692  |g|= 0.0035  |ddm|= 0.11
    CPU time for cycle= 4      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.00495393
diis-c [-5.73722619e-06  1.60095226e-02  1.14471480e-01 -4.89132433e-01
  1.35865143e+00]
alpha HOMO (B2u) = -0.57052366503579  LUMO (Ag) = 0.138994300395628
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.1649018546667  LUMO = 0.138994300395628
   mo_energy = [-15.67982364  -1.16490185   0.1389943    0.65224753   0.65224753
   1.29135699   2.38192482   2.38192482]
alpha-B1g nocc = 0
   mo_energy = [0.65224753 2.38192482]
alpha-B2g nocc = 0
   mo_energy = [0.65224753 2.38192482]
alpha-B3g nocc = 0
   mo_energy = [0.65224753 2.38192482]
alpha-B1u nocc = 1  HOMO = -0.570523665035791  LUMO = 0.155611055325363
   mo_energy = [-0.57052367  0.15561106  1.03049727]
alpha-B2u nocc = 1  HOMO = -0.57052366503579  LUMO = 0.155611055325363
   mo_energy = [-0.57052367  0.15561106  1.03049727]
alpha-B3u nocc = 1  HOMO = -0.570523665035792  LUMO = 0.155611055325363
   mo_energy = [-0.57052367  0.15561106  1.03049727]
beta-Ag nocc = 2  HOMO = -0.730578601111801  LUMO = 0.16444321594915
   mo_energy = [-15.58787098  -0.7305786    0.16444322   0.71511807   0.71511807
   1.41063253   2.56088299   2.56088299]
beta-B1g nocc = 0
   mo_energy = [0.71511807 2.56088299]
beta-B2g nocc = 0
   mo_energy = [0.71511807 2.56088299]
beta-B3g nocc = 0
   mo_energy = [0.71511807 2.56088299]
beta-B1u nocc = 0
   mo_energy = [0.08225972 0.2646479  1.22104951]
beta-B2u nocc = 0
   mo_energy = [0.08225972 0.2646479  1.22104951]
beta-B3u nocc = 0
   mo_energy = [0.08225972 0.2646479  1.22104951]
multiplicity <S^2> = 3.7570219  2S+1 = 4.0035094
E1 = -73.912650390365  Ecoul = 19.519467147712337
cycle= 5 E= -54.3931832426527  delta_E= -1.28e-05  |g|= 0.000365  |ddm|= 0.016
    CPU time for cycle= 5      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=0.000516856
diis-c [-1.70959013e-08  2.47043695e-04 -1.26045163e-02  4.96654342e-02
 -2.25550344e-01  1.18824238e+00]
alpha HOMO (B1u) = -0.570533030229564  LUMO (Ag) = 0.138979985957851
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16501298890032  LUMO = 0.138979985957851
   mo_energy = [-15.67966561  -1.16501299   0.13897999   0.65226086   0.65226086
   1.29132974   2.38199001   2.38199001]
alpha-B1g nocc = 0
   mo_energy = [0.65226086 2.38199001]
alpha-B2g nocc = 0
   mo_energy = [0.65226086 2.38199001]
alpha-B3g nocc = 0
   mo_energy = [0.65226086 2.38199001]
alpha-B1u nocc = 1  HOMO = -0.570533030229564  LUMO = 0.155663507414139
   mo_energy = [-0.57053303  0.15566351  1.03056645]
alpha-B2u nocc = 1  HOMO = -0.570533030229564  LUMO = 0.155663507414139
   mo_energy = [-0.57053303  0.15566351  1.03056645]
alpha-B3u nocc = 1  HOMO = -0.570533030229566  LUMO = 0.155663507414138
   mo_energy = [-0.57053303  0.15566351  1.03056645]
beta-Ag nocc = 2  HOMO = -0.730523514343716  LUMO = 0.164497407766439
   mo_energy = [-15.58765254  -0.73052351   0.16449741   0.71512604   0.71512604
   1.41079254   2.56095806   2.56095806]
beta-B1g nocc = 0
   mo_energy = [0.71512604 2.56095806]
beta-B2g nocc = 0
   mo_energy = [0.71512604 2.56095806]
beta-B3g nocc = 0
   mo_energy = [0.71512604 2.56095806]
beta-B1u nocc = 0
   mo_energy = [0.08227114 0.26470008 1.22115783]
beta-B2u nocc = 0
   mo_energy = [0.08227114 0.26470008 1.22115783]
beta-B3u nocc = 0
   mo_energy = [0.08227114 0.26470008 1.22115783]
multiplicity <S^2> = 3.757075  2S+1 = 4.003536
E1 = -73.91190631924331  Ecoul = 19.51872293002934
cycle= 6 E= -54.393183389214  delta_E= -1.47e-07  |g|= 1.73e-05  |ddm|= 0.00166
    CPU time for cycle= 6      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=2.45286e-05
diis-c [-1.64904211e-10 -7.04026499e-05  1.94168796e-03 -7.25931271e-03
  3.57389635e-02 -2.00697888e-01  1.17034695e+00]
alpha HOMO (B1u) = -0.570533688849075  LUMO (Ag) = 0.138978862218228
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16501563720172  LUMO = 0.138978862218228
   mo_energy = [-15.67966994  -1.16501564   0.13897886   0.65225967   0.65225967
   1.2913269    2.38198948   2.38198948]
alpha-B1g nocc = 0
   mo_energy = [0.65225967 2.38198948]
alpha-B2g nocc = 0
   mo_energy = [0.65225967 2.38198948]
alpha-B3g nocc = 0
   mo_energy = [0.65225967 2.38198948]
alpha-B1u nocc = 1  HOMO = -0.570533688849075  LUMO = 0.155663801642622
   mo_energy = [-0.57053369  0.1556638   1.03056709]
alpha-B2u nocc = 1  HOMO = -0.570533688849075  LUMO = 0.155663801642622
   mo_energy = [-0.57053369  0.1556638   1.03056709]
alpha-B3u nocc = 1  HOMO = -0.570533688849076  LUMO = 0.155663801642622
   mo_energy = [-0.57053369  0.1556638   1.03056709]
beta-Ag nocc = 2  HOMO = -0.730523547491088  LUMO = 0.16449433936444
   mo_energy = [-15.58765966  -0.73052355   0.16449434   0.71512622   0.71512622
   1.41078571   2.56095512   2.56095512]
beta-B1g nocc = 0
   mo_energy = [0.71512622 2.56095512]
beta-B2g nocc = 0
   mo_energy = [0.71512622 2.56095512]
beta-B3g nocc = 0
   mo_energy = [0.71512622 2.56095512]
beta-B1u nocc = 0
   mo_energy = [0.08227251 0.26469696 1.22115461]
beta-B2u nocc = 0
   mo_energy = [0.08227251 0.26469696 1.22115461]
beta-B3u nocc = 0
   mo_energy = [0.08227251 0.26469696 1.22115461]
multiplicity <S^2> = 3.7570722  2S+1 = 4.0035345
E1 = -73.91190561477818  Ecoul = 19.518722225139765
cycle= 7 E= -54.3931833896384  delta_E= -4.24e-10  |g|= 1.56e-06  |ddm|= 6.56e-05
    CPU time for cycle= 7      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=2.21166e-06
diis-c [-1.53883598e-13  5.10970840e-06 -1.77069140e-04  6.42350759e-04
 -2.86610275e-03  1.72848245e-02 -1.58206220e-01  1.14331711e+00]
alpha HOMO (B1u) = -0.570532157510454  LUMO (Ag) = 0.138978818776039
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16501421866918  LUMO = 0.138978818776039
   mo_energy = [-15.67966814  -1.16501422   0.13897882   0.6522599    0.6522599
   1.29132759   2.38199046   2.38199046]
alpha-B1g nocc = 0
   mo_energy = [0.6522599  2.38199046]
alpha-B2g nocc = 0
   mo_energy = [0.6522599  2.38199046]
alpha-B3g nocc = 0
   mo_energy = [0.6522599  2.38199046]
alpha-B1u nocc = 1  HOMO = -0.570532157510454  LUMO = 0.155663698250175
   mo_energy = [-0.57053216  0.1556637   1.03056749]
alpha-B2u nocc = 1  HOMO = -0.570532157510454  LUMO = 0.155663698250174
   mo_energy = [-0.57053216  0.1556637   1.03056749]
alpha-B3u nocc = 1  HOMO = -0.570532157510454  LUMO = 0.155663698250175
   mo_energy = [-0.57053216  0.1556637   1.03056749]
beta-Ag nocc = 2  HOMO = -0.730525107941464  LUMO = 0.16449465669601
   mo_energy = [-15.58765768  -0.73052511   0.16449466   0.71512654   0.71512654
   1.41078688   2.5609557    2.5609557 ]
beta-B1g nocc = 0
   mo_energy = [0.71512654 2.5609557 ]
beta-B2g nocc = 0
   mo_energy = [0.71512654 2.5609557 ]
beta-B3g nocc = 0
   mo_energy = [0.71512654 2.5609557 ]
beta-B1u nocc = 0
   mo_energy = [0.08227292 0.26469704 1.22115546]
beta-B2u nocc = 0
   mo_energy = [0.08227292 0.26469704 1.22115546]
beta-B3u nocc = 0
   mo_energy = [0.08227292 0.26469704 1.22115546]
multiplicity <S^2> = 3.7570718  2S+1 = 4.0035344
E1 = -73.91190493642777  Ecoul = 19.518721546785738
cycle= 8 E= -54.393183389642  delta_E= -3.62e-12  |g|= 5.54e-08  |ddm|= 5.89e-06
    CPU time for cycle= 8      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=7.83555e-08
diis-c [-2.38369713e-15 -4.71139865e-07  1.71554943e-05 -6.02803687e-05
  2.59790228e-04 -1.65869304e-03  1.61936108e-02 -1.34578233e-01
  1.11982712e+00]
alpha HOMO (B1u) = -0.570532218272422  LUMO (Ag) = 0.138978810616218
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16501425998639  LUMO = 0.138978810616218
   mo_energy = [-15.67966819  -1.16501426   0.13897881   0.65225988   0.65225988
   1.29132757   2.38199042   2.38199042]
alpha-B1g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B2g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B3g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B1u nocc = 1  HOMO = -0.570532218272422  LUMO = 0.155663702384439
   mo_energy = [-0.57053222  0.1556637   1.03056747]
alpha-B2u nocc = 1  HOMO = -0.570532218272423  LUMO = 0.155663702384439
   mo_energy = [-0.57053222  0.1556637   1.03056747]
alpha-B3u nocc = 1  HOMO = -0.570532218272423  LUMO = 0.155663702384438
   mo_energy = [-0.57053222  0.1556637   1.03056747]
beta-Ag nocc = 2  HOMO = -0.730525013342493  LUMO = 0.164494616994804
   mo_energy = [-15.58765773  -0.73052501   0.16449462   0.71512652   0.71512652
   1.41078678   2.56095567   2.56095567]
beta-B1g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B2g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B3g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B1u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B2u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B3u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
multiplicity <S^2> = 3.7570718  2S+1 = 4.0035344
E1 = -73.91190492980205  Ecoul = 19.51872154016006
cycle= 9 E= -54.393183389642  delta_E= 4.26e-14  |g|= 5.03e-09  |ddm|= 1.76e-07
    CPU time for cycle= 9      0.00 sec, wall time      0.00 sec
diis-norm(errvec)=7.11877e-09
Linear dependence found in DIIS error vectors.
diis-c [-9.11181603e-16  5.36048961e-01  3.97482504e-06 -1.37129324e-05
  5.13437024e-05 -3.37573572e-04  3.93279325e-03 -3.93396185e-02
  4.99653832e-01]
alpha HOMO (B1u) = -0.57053221607583  LUMO (Ag) = 0.138978809862566
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.16501425855662  LUMO = 0.138978809862566
   mo_energy = [-15.6796682   -1.16501426   0.13897881   0.65225988   0.65225988
   1.29132757   2.38199042   2.38199042]
alpha-B1g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B2g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B3g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B1u nocc = 1  HOMO = -0.57053221607583  LUMO = 0.155663701408675
   mo_energy = [-0.57053222  0.1556637   1.03056747]
alpha-B2u nocc = 1  HOMO = -0.570532216075831  LUMO = 0.155663701408674
   mo_energy = [-0.57053222  0.1556637   1.03056747]
alpha-B3u nocc = 1  HOMO = -0.570532216075831  LUMO = 0.155663701408674
   mo_energy = [-0.57053222  0.1556637   1.03056747]
beta-Ag nocc = 2  HOMO = -0.730525023955115  LUMO = 0.164494619086052
   mo_energy = [-15.58765773  -0.73052502   0.16449462   0.71512652   0.71512652
   1.41078679   2.56095567   2.56095567]
beta-B1g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B2g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B3g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B1u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B2u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B3u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
multiplicity <S^2> = 3.7570718  2S+1 = 4.0035344
E1 = -73.91190493042434  Ecoul = 19.51872154078235
cycle= 10 E= -54.393183389642  delta_E=    0  |g|= 3.74e-09  |ddm|= 6.95e-09
    CPU time for cycle= 10      0.00 sec, wall time      0.00 sec
alpha HOMO (B1u) = -0.570532214942804  LUMO (Ag) = 0.138978809800452
alpha irrep_nelec = [2, 0, 0, 0, 1, 1, 1]
beta  irrep_nelec = [2, 0, 0, 0, 0, 0, 0]
alpha-Ag nocc = 2  HOMO = -1.1650142561299  LUMO = 0.138978809800452
   mo_energy = [-15.67966819  -1.16501426   0.13897881   0.65225988   0.65225988
   1.29132757   2.38199042   2.38199042]
alpha-B1g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B2g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B3g nocc = 0
   mo_energy = [0.65225988 2.38199042]
alpha-B1u nocc = 1  HOMO = -0.570532214942804  LUMO = 0.155663701601426
   mo_energy = [-0.57053221  0.1556637   1.03056747]
alpha-B2u nocc = 1  HOMO = -0.570532214942804  LUMO = 0.155663701601425
   mo_energy = [-0.57053221  0.1556637   1.03056747]
alpha-B3u nocc = 1  HOMO = -0.570532214942804  LUMO = 0.155663701601425
   mo_energy = [-0.57053221  0.1556637   1.03056747]
beta-Ag nocc = 2  HOMO = -0.730525026238159  LUMO = 0.164494620005476
   mo_energy = [-15.58765773  -0.73052503   0.16449462   0.71512652   0.71512652
   1.41078679   2.56095567   2.56095567]
beta-B1g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B2g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B3g nocc = 0
   mo_energy = [0.71512652 2.56095567]
beta-B1u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B2u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
beta-B3u nocc = 0
   mo_energy = [0.08227291 0.26469703 1.22115542]
multiplicity <S^2> = 3.7570718  2S+1 = 4.0035344
E1 = -73.9119049223447  Ecoul = 19.5187215327027
Extra cycle  E= -54.393183389642  delta_E= -1.42e-14  |g|= 9.42e-10  |ddm|= 1.1e-08
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
    CPU time for SCF      0.04 sec, wall time      0.04 sec
converged SCF energy = -54.393183389642  <S^2> = 3.7570718  2S+1 = 4.0035344
